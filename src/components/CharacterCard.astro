---
export interface Props {
    charId: string;
    name: string;
    imgSrc?: string; 
    quote?: string;
    quoteAttribution?: string;
    style?: string;
}

const { charId, name, imgSrc, quote, quoteAttribution, style } = Astro.props;
const placeholderImg = `https://placehold.co/325x490/e0e0e0/333?text=${name}`;
---

<div class="card-container" style={style}>
    <div class="card">
        <div class="card-front">
            <div class="photo" style={`background-image: url(${imgSrc || placeholderImg})`}></div>
        </div>
        <div class="card-back">
            <h3>{name}</h3>
            {quote && (
                <blockquote class="character-quote">
                    {quote}
                    {quoteAttribution && <cite>— {quoteAttribution}</cite>}
                </blockquote>
            )}
        </div>
    </div>
</div>


<style>
    .card-container {
        perspective: 1500px;
    }

    .card {
        width: clamp(280px, 17.5vw, 325px);
        height: clamp(423px, 26.4vw, 490px);
        position: relative;
        transition: transform 0.8s;
        transform-style: preserve-3d;
        cursor: pointer;
        margin-right: 20px;
    }

    .card-front, .card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        border-radius: 8px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        box-sizing: border-box;
        overflow: hidden;
    }

    .card-front {
        background-color: var(--color-card-text);
    }

    .photo {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        transform: scale(1.02) translateZ(0); /* Bleed and smoothing trick */
    }

    .card-back {
        background-color: var(--color-card-bg);
        color: var(--color-card-text);
        transform: rotateY(180deg);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-size: 0.95rem;
        padding: clamp(20px, 4vw, 30px); /* Responsive padding */
        position: relative;
        z-index: 1;
        overflow-y: auto;
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE and Edge */
    }
    .card-back::-webkit-scrollbar {
        display: none; /* Chrome, Safari, Opera */
    }

    /* Background color layer */
    .card-back::before {
        content: '';
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        background-color: var(--color-card-bg);
        border-radius: 8px;
        z-index: -2;
    }
    
    /* Noise texture layer */
    .card-back::after {
        content: '';
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 250 250"><filter id="noise"><feTurbulence baseFrequency="0.65" numOctaves="3" stitchTiles="stitch"/></filter><rect width="100%" height="100%" filter="url(%23noise)"/></svg>');
        opacity: 0.35;
        mix-blend-mode: multiply;
        pointer-events: none;
        border-radius: 8px;
        z-index: -1;
    }

    .card-back h3 {
        font-size: clamp(1.4rem, 2.2vw, 1.6rem);
        font-family: 'Playfair Display', serif;
        margin: 0 0 20px 0;
    }

    .character-quote {
        position: relative;
        font-family: 'Playfair Display', serif;
        font-style: italic;
        font-size: clamp(0.85rem, 1.2vw, 0.9rem);
        line-height: 1.5;
        margin: 0;
        padding: 0 30px;
        text-align: center;
    }

    .character-quote::before,
    .character-quote::after {
        position: absolute;
        font-family: 'Playfair Display', serif;
        font-size: clamp(2.5rem, 4vw, 3rem);
        line-height: 1;
        color: var(--color-primary);
    }

    .character-quote::before {
        content: '“';
        top: -0.2em;
        left: 0;
    }

    .character-quote::after {
        content: '”';
        bottom: -0.5em;
        right: 0;
    }

    .character-quote cite {
        display: block;
        text-align: right;
        margin-top: 10px;
        font-size: 0.9rem;
        font-style: normal;
    }
</style>

<script>
    document.querySelectorAll('.card-container').forEach(cardContainer => {
        const card = cardContainer.querySelector('.card') as HTMLElement;
        
        let isFlipped = false;
        let tiltX = 0;
        let tiltY = 0;

        function updateTransform(transition = 'transform 0.1s ease-out') {
            card.style.transition = transition;
            const flipRotation = isFlipped ? 180 : 0;
            // Invert vertical tilt when card is flipped for natural feel
            const effectiveTiltX = isFlipped ? -tiltX : tiltX;

            card.style.transform = `rotateY(${flipRotation}deg) rotateX(${effectiveTiltX}deg) rotateY(${tiltY}deg)`;
        }

        const handleMouseMove = (e: MouseEvent) => {
            const rect = cardContainer.getBoundingClientRect();
            const x = e.clientX - rect.left - rect.width / 2;
            const y = e.clientY - rect.top - rect.height / 2;

            tiltX = -y / 25;
            tiltY = x / 25;
            
            updateTransform();
        };

        const handleMouseLeave = () => {
            tiltX = 0;
            tiltY = 0;
            updateTransform('transform 0.5s ease-out');
        };
        
        const handleClick = () => {
            isFlipped = !isFlipped;
            // Reset tilt on click to make flip animation clean
            tiltX = 0;
            tiltY = 0;
            updateTransform('transform 0.8s ease');
        };

        cardContainer.addEventListener('mousemove', handleMouseMove as EventListener);
        cardContainer.addEventListener('mouseleave', handleMouseLeave);
        cardContainer.addEventListener('click', handleClick);
    });
</script> 
